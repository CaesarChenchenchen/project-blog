{
  "hash": "7b2ad6fec8ef66155cd62847cf7caa5b",
  "result": {
    "markdown": "---\ntitle: \"NJ Transit Delay Time Prediction\"\nauthor: \"Tianxiao & Ling\"\ndate: \"2023-11-25\"\ncategories: [transit, code, analysis]\nimage: \"image.jpg\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n# Introduction\nServing as the second largest commuter rail network in the United State, the NJ Transit spans New Jersey and the state to New York City. However, their delays are getting worse with more office workers returning, on the other hand, there are no interactive apps for commuters that can predict the immediate delays that may happen by chance or fixedly occur on their daily commute routes during the day. As such, they cannot foresee them instantly and mitigate accordingly.\n\nIn our project, we further investigate into the delay performance on NJ transit's commuter rail routes and come up with some interactive & instant predictive strategies targeted at commuters within NJ Transit Commuter Rail Routes.\n\nAs such, Delay detective is designed with commuters in mind. The functions include the notifications of the estimated arrival time before scheduled arrival time, on-time & average-delay performance, as well as passenger feedback.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidycensus)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(tigris)\nlibrary(viridis)\nlibrary(riem)\nlibrary(gridExtra)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(RSocrata)\nlibrary(spdep)\nlibrary(caret)\nlibrary(ckanr)\nlibrary(FNN)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(ggcorrplot) # plot correlation plot\nlibrary(corrr)      # another way to plot correlation plot\nlibrary(kableExtra)\nlibrary(jtools)     # for regression model plots\nlibrary(ggstance) # to support jtools plots\nlibrary(ggpubr)    # plotting R^2 value on ggplot point scatter\nlibrary(broom.mixed) # needed for effects plots\nlibrary(vtable)\nlibrary(gganimate)\nlibrary(gifski)\nlibrary(purrr)\nlibrary(geosphere)\nlibrary(googlesheets4)\nlibrary(corrplot)\n\nplotTheme <- theme(\n  plot.title =element_text(size=12),\n  plot.subtitle = element_text(size=8),\n  plot.caption = element_text(size = 6),\n  axis.text.x = element_text(size = 10, angle = 45, hjust = 1),\n  axis.text.y = element_text(size = 10),\n  axis.title.y = element_text(size = 10),\n  # Set the entire chart region to blank\n  panel.background=element_blank(),\n  plot.background=element_blank(),\n  #panel.border=element_rect(colour=\"#F0F0F0\"),\n  # Format the grid\n  panel.grid.major=element_line(colour=\"#D0D0D0\",size=.2),\n  axis.ticks=element_blank())\n\nmapTheme <- theme(plot.title =element_text(size=10),\n                  plot.subtitle = element_text(size=8),\n                  plot.caption = element_text(size = 6),\n                  axis.line=element_blank(),\n                  axis.text.x=element_blank(),\n                  axis.text.y=element_blank(),\n                  axis.ticks=element_blank(),\n                  axis.title.x=element_blank(),\n                  axis.title.y=element_blank(),\n                  panel.background=element_blank(),\n                  panel.border=element_blank(),\n                  panel.grid.major=element_line(colour = 'transparent'),\n                  panel.grid.minor=element_blank(),\n                  legend.direction = \"vertical\", \n                  legend.position = \"right\",\n                  plot.margin = margin(1, 1, 1, 1, 'cm'),\n                  legend.key.height = unit(1, \"cm\"), legend.key.width = unit(0.2, \"cm\"))\n\nsource(\"https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r\")\n\npalette6 <- c(\"#264653\",\"#2a9d8f\",'#8AB17D',\"#e9c46a\",'#f4a261',\"#e76f51\")\npalette5 <- c(\"#264653\",\"#2a9d8f\",\"#e9c46a\",'#f4a261',\"#e76f51\")\npalette4 <- c(\"#264653\",\"#2a9d8f\",\"#e9c46a\",\"#e76f51\")\npalette2 <- c(\"#264653\",\"#2a9d8f\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#geometry data\nline <- st_read('https://services6.arcgis.com/M0t0HPE53pFK525U/arcgis/rest/services/NJTRANSIT_RAIL_LINES_1/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson')%>%\n  mutate(LINE_NAME = ifelse(LINE_NAME == 'Bergen County Line','Bergen Co. Line ',LINE_NAME),\n         LINE_NAME = ifelse(LINE_NAME == 'Montclair-Boonton Line','Montclair-Boonton',LINE_NAME),\n         LINE_NAME = ifelse(LINE_NAME == 'North Jersey Coast Line','No Jersey Coast',LINE_NAME),\n         LINE_NAME = ifelse(LINE_NAME == 'Northeast Corridor','Northeast Corrdr',LINE_NAME),\n         LINE_NAME = ifelse(LINE_NAME == 'Pascack Valley Line','Pascack Valley',LINE_NAME),\n         LINE_NAME = ifelse(LINE_NAME == 'Princeton Dinky','Princeton Shuttle',LINE_NAME),\n         LINE_NAME = ifelse(LINE_NAME == 'Raritan Valley Line','Raritan Valley',LINE_NAME))%>%\n  dplyr::select(LINE_NAME,geometry)\n\nstop <- st_read(\"https://services6.arcgis.com/M0t0HPE53pFK525U/arcgis/rest/services/NJTransit_Rail_Stations/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\") %>%\n  mutate(STATION_ID = ifelse(STATION_ID == 'Atlantic City', 'Atlantic City Rail Terminal', STATION_ID),\n         STATION_ID = ifelse((STATION_ID == 'Middletown')&(COUNTY == 'Orange, NY'), 'Middletown NY', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Princeton Jct.', 'Princeton Junction', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Secaucus Junction Upper Level', 'Secaucus Upper Lvl', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Anderson Street-Hackensack', 'Anderson Street', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Bay Street-Montclair', 'Bay Street', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Broadway', 'Broadway Fair Lawn', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Essex Street-Hackensack', 'Essex Street', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Glen Rock-Boro Hall', 'Glen Rock Boro Hall', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Glen Rock-Main', 'Glen Rock Main Line', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Hoboken Terminal', 'Hoboken', STATION_ID),\n         STATION_ID = ifelse((STATION_ID == 'Middletown')&(COUNTY == 'Monmouth'), 'Middletown NJ', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Montclair St Univ', 'Montclair State U', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Mountain View-Wayne', 'Mountain View', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Pennsauken Transit Center', 'Pennsauken', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Radburn', 'Radburn Fair Lawn', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Ramsey', 'Ramsey Main St', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Rte 17 Ramsey', 'Ramsey Route 17', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Secaucus Junction Lower Level', 'Secaucus Lower Lvl', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Teterboro-Williams Ave', 'Teterboro', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Watsessing', 'Watsessing Avenue', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Wayne Route 23 Transit Center', 'Wayne-Route 23', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == 'Wood-Ridge', 'Wood Ridge', STATION_ID),\n         STATION_ID = ifelse(STATION_ID == '30th Street Station', 'Philadelphia', STATION_ID),\n         line_intersct = str_count(RAIL_SERVICE, \",\") + 1)%>%\n  dplyr::select(STATION_ID,LATITUDE,LONGITUDE,line_intersct)%>%\n  st_drop_geometry()\n\nid <- '1V_kl3QKOxrTlwA8UG7kdv_VpJdaojKMj'\ndelay_df <- read.csv(sprintf(\"https://docs.google.com/uc?id=%s&export=download\", id))%>%\n  filter(type == 'NJ Transit')%>%\n  na.omit()\n\nmerged_dataset <- merge(delay_df, stop, by.x = \"from\", by.y = \"STATION_ID\",all.x = TRUE)\nmerged_dataset <- merge(merged_dataset, stop, by.x = \"to\", by.y = \"STATION_ID\",all.x = TRUE)\nmerged_dataset <- merged_dataset%>%\n  filter(to != 'Mount Arlington')%>%\n  filter(from != 'Mount Arlington')%>%\n  rename(from_lat = LATITUDE.x,\n         from_lon = LONGITUDE.x,\n         from_inter = line_intersct.x,\n         to_lat = LATITUDE.y,\n         to_lon = LONGITUDE.y,\n         to_inter = line_intersct.y\n         )%>%\n  mutate(distance = distHaversine(cbind(from_lon, from_lat), cbind(to_lon, to_lat)),\n         interval60 = floor_date(ymd_hms(scheduled_time), unit = \"hour\"),\n         week = week(interval60),\n         dotw = wday(interval60, label=TRUE),\n         time_of_day = case_when(hour(interval60) < 7 | hour(interval60) > 19 ~ \"Overnight\",\n                                 hour(interval60) >= 7 & hour(interval60) < 10 ~ \"AM Rush\",\n                                 hour(interval60) >= 10 & hour(interval60) < 15 ~ \"Mid-Day\",\n                                 hour(interval60) >= 15 & hour(interval60) <= 19 ~ \"PM Rush\"),\n         weekend = ifelse(dotw %in% c(\"Sun\", \"Sat\"), \"Weekend\", \"Weekday\"))\n\n#wweather data\nweather.Panel <- \n  riem_measures(station = \"EWR\", date_start = \"2019-10-01\", date_end = \"2019-11-02\") %>%\n  dplyr::select(valid, tmpf, p01i, sknt)%>%\n  replace(is.na(.), 0) %>%\n    mutate(interval60 = ymd_h(substr(valid,1,13))) %>%\n    mutate(week = week(interval60),\n           dotw = wday(interval60, label=TRUE)) %>%\n    group_by(interval60) %>%\n    summarize(Temperature = max(tmpf),\n              Precipitation = sum(p01i),\n              Wind_Speed = max(sknt)) %>%\n    mutate(Temperature = ifelse(Temperature == 0, 42, Temperature))\n\n# census data\nNJCensus <- \n  get_acs(geography = \"county subdivision\", \n          variables = c(\"B01003_001\", \"B19013_001\", \n                        \"B02001_002\", \"B08013_001\",\n                        \"B08012_001\", \"B08301_001\", \n                        \"B08301_010\", \"B01002_001\"), \n          year = 2019, \n          state = \"NJ\", \n          geometry = TRUE, \n          output = \"wide\") %>%\n  rename(Total_Pop =  B01003_001E,\n         Med_Inc = B19013_001E,\n         Med_Age = B01002_001E,\n         White_Pop = B02001_002E,\n         Travel_Time = B08013_001E,\n         Num_Commuters = B08012_001E,\n         Means_of_Transport = B08301_001E,\n         Total_Public_Trans = B08301_010E) %>%\n  select(Total_Pop, Med_Inc, White_Pop, Travel_Time,\n         Means_of_Transport, Total_Public_Trans,\n         Med_Age,\n         GEOID, geometry) %>%\n  mutate(Percent_White = White_Pop / Total_Pop,\n         Mean_Commute_Time = Travel_Time / Total_Public_Trans,\n         Percent_Taking_Public_Trans = Total_Public_Trans / Means_of_Transport)\n\nNJCensus_select <- NJCensus%>%\n  mutate(bigcity = ifelse(Total_Pop >= 100000, 'big city','small city'))%>%\n  select(geometry, Total_Pop,bigcity, GEOID)\n\nNJTracts <- \n  NJCensus %>%\n  as.data.frame() %>%\n  distinct(GEOID, .keep_all = TRUE) %>%\n  select(GEOID, geometry) %>% \n  st_sf\n\ntrain_census <- st_join(merged_dataset %>% \n          filter(is.na(from_lon) == FALSE &\n                   is.na(from_lat) == FALSE &\n                   is.na(to_lat) == FALSE &\n                   is.na(to_lon) == FALSE) %>%\n          st_as_sf(., coords = c(\"from_lon\", \"from_lat\"), crs = 4326),\n        NJTracts %>%\n          st_transform(crs=4326),\n        join=st_intersects,\n              left = TRUE) %>%\n  rename(From.Tract = GEOID) %>%\n  mutate(from_lon = unlist(map(geometry, 1)),\n         from_lat = unlist(map(geometry, 2)))%>%\n  as.data.frame() %>%\n  select(-geometry)\n\ntrain_census <- train_census %>%\n  st_as_sf(., coords = c(\"to_lon\", \"to_lat\"), crs = 4326) %>%\n  st_join(., NJTracts %>%\n            st_transform(crs=4326),\n          join=st_intersects,\n          left = TRUE) %>%\n  rename(To.Tract = GEOID)  %>%\n  mutate(to_lon = unlist(map(geometry, 1)),\n         to_lat = unlist(map(geometry, 2)))%>%\n  as.data.frame() %>%\n  select(-geometry)\n\ntrain_dataset <-train_census  %>%\n  left_join(weather.Panel, by =\"interval60\")\n\nmerged_dataset <- train_dataset  %>%\n  left_join(NJCensus_select, by = c(\"From.Tract\" = \"GEOID\")) %>%\n  left_join(NJCensus_select, by =c(\"To.Tract\"=\"GEOID\")) %>%\n  select(-geometry.x,-geometry.y) %>%\n  rename(From_Total_Pop = Total_Pop.x,\n         To_Total_Pop = Total_Pop.y,\n         From_city = bigcity.x,\n         To_city = bigcity.y)%>%\n  mutate(From_Total_Pop = ifelse(from == \"Philadelphia\", 1579075, From_Total_Pop),\n         To_Total_Pop = ifelse(to == \"Philadelphia\", 1579075, To_Total_Pop),\n         From_Total_Pop = ifelse(from == \"Middletown NY\", 1631993, From_Total_Pop),\n         To_Total_Pop = ifelse(to == \"Middletown NY\", 1631993, To_Total_Pop),\n         From_city = ifelse(from == \"Philadelphia\", 'big city', From_city),\n         To_city = ifelse(to == \"Philadelphia\", 'big city', To_city),\n         From_city = ifelse(from == \"Middletown NY\", 'big city', From_city),\n         To_city = ifelse(to == \"Middletown NY\", 'big city', To_city))\n\nmedian_value_f <- median(merged_dataset$From_Total_Pop, na.rm = TRUE)\nmerged_dataset$From_Total_Pop[is.na(merged_dataset$From_Total_Pop)] <- median_value_f\nmedian_value_t <- median(merged_dataset$To_Total_Pop, na.rm = TRUE)\nmerged_dataset$To_Total_Pop[is.na(merged_dataset$To_Total_Pop)] <- median_value_t\n\nmerged_dataset <- merged_dataset%>%\n  mutate(From_city = ifelse(From_Total_Pop == 24784, 'big city', From_city),\n         To_city = ifelse(To_Total_Pop == 24784, 'big city', To_city))\n```\n:::\n\n\n# Exploratory Analysis\n## Data Source\n*[NJ Transit Delay Data](https://www.kaggle.com/datasets/pranavbadami/nj-transit-amtrak-nec-performance) --- The dataset provides delay data for each month between NJ transit 2018-2019, and delay data for October 2019 was used in this project.\n\n*[NJ Rail Station & Line Data](https://njogis-newjersey.opendata.arcgis.com) --- The dataset provides the geometry data of the line and station, and be used for further data visualization.\n\n*[Weather Data](https://mesonet.agron.iastate.edu/request/download.phtml) --- The dataset provides the weather data collected from the weather stations. And the dataset include the precipitation, wind speed and temperature data.\n\n*[Census Data](https://data.census.gov/) --- The dataset is provided by Census Bureau and gives the social-ecnomic situation of city.\n\n## Serial Autocorrelation - Fixed Effects\nFrom the Temporal Series Analysis, We can find that Delay in NJ Transit has an obvious regularity in the temporal field. We were able to find that weekend delays had a longer average length than weekdays. And when we look at latency over a 24-hour period, we can see that latency reaches its maximum between 2:00 a.m. and 3:00 a.m., and overall latency stays on an upward trend from 4:00 a.m. onwards. And when we look at the relationship between stop sequence and delay time, we are able to see that the average latency time increases as the station sequence increases. We were able to find the highest latency in the PM Rush phase, followed by the overnight phase. When we wanted to explore the compounding of time, we were able to find that the PM Rush phase and the overnight phase had significantly higher latency times on weekends than on weekdays. And when we look at the pattern of average delay times for 24 hours in a day compared to weekdays and weekends, we find that they both maintain a similar pattern.\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_time <- merged_dataset %>%\n  group_by(time_of_day)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ndelay_day <- merged_dataset %>%\n  group_by(dotw)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ndelay_week <- merged_dataset %>%\n  group_by(weekend)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ndelay_hour <- merged_dataset %>%\n  group_by(hour(interval60))%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  rename(hour = 'hour(interval60)')\n\ndelay_sequence <- merged_dataset %>%\n  group_by(stop_sequence)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ndelay_time_week <- merged_dataset %>%\n  group_by(time_of_day,weekend)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ndelay_week_hour <- merged_dataset %>%\n  group_by(weekend,hour(interval60))%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  rename(hour = 'hour(interval60)')\n\ngrid.arrange(ggplot(data = delay_day, aes(x = dotw, y = mean_delay)) +\n  geom_bar(stat = \"identity\",fill = \"#2a9d8f\") +\n  labs(title = \"Delay minutes in a week\", x = \"Day of The Week\", y = \"Mean Delay\") +\n  theme_minimal(),\n  ggplot(data = delay_week, aes(x = weekend, y = mean_delay)) +\n  geom_bar(stat = \"identity\",fill = palette2) +\n  labs(title = \"Delay comparison in Weekend\", x = \"Weekend or Weekday\", y = \"Mean Delay\") +\n  theme_minimal(),\n  ggplot(data = delay_hour, aes(x = hour, y = mean_delay)) +\n  geom_bar(stat = \"identity\",fill = \"#2a9d8f\") +\n  labs(title = \"Delay minutes in 24 hours\", x = \"Hour in a day\", y = \"Mean Delay\") +\n  theme_minimal(),\n  ggplot(data = delay_sequence, aes(x = stop_sequence, y = mean_delay)) +\n  geom_bar(stat = \"identity\",fill = \"#2a9d8f\") +\n  labs(title = \"Delay minutes in each sequence\", x = \"Stop Sequence\", y = \"Mean Delay\") +\n  theme_minimal(),\n  ggplot(data = delay_time, aes(x = time_of_day, y = mean_delay)) +\n  geom_bar(stat = \"identity\",fill = \"#2a9d8f\") +\n  labs(title = \"Delay minutes in a week\", x = \"Day of The Week\", y = \"Mean Delay\") +\n  theme_minimal(),\n  ggplot(data = delay_week_hour, aes(x = hour, y = mean_delay, color = weekend)) +\n  geom_line() +\n  scale_color_manual(values = palette2) +\n  labs(title = \"The delay under week and time\", x = \"Hour\", y = \"Delay Minutes\") +\n  theme_minimal(),nrow=3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/delay analysis-1.png){width=960}\n:::\n\n```{.r .cell-code}\nmerged_dataset%>%\n  dplyr::select(interval60, from, delay_minutes) %>%\n  gather(Variable, Value, -interval60, -from) %>%\n    group_by(Variable, interval60) %>%\n    summarize(Value = mean(Value))%>%\n    ggplot(aes(interval60, Value)) + \n    geom_line(size = 0.8,colour=\"#2a9d8f\")+\n      labs(title = \"Delay distribution in A Month\", subtitle = \"NJ, Oct, 2019\",  x = \"Day\", y= \"Mean Delay\") +\n     theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/delay analysis-2.png){width=960}\n:::\n:::\n\n\n## Spatial Autocorrelation - Fixed Effects\nFrom the charts and maps, we can observe that the delay time is highly associated with station and line. Specifically, the Atlantic city line has the most serious delay situation.Same with the stations along the Atlantic city Line. However, NJ Transit Commuter Routes as a whole have similar trends in delays. Also, in order to compare the difference in delay time, we compared the size of the city where the station is located with delay time based on census tracts under counties and defined cities with populations over 100,000 as big cities. It was found that delay time was an insignificant factor. In the meantime, from the map we can also conclude that the direction doesn’t seem to have a significant influence on delay in general.\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_line <- merged_dataset %>%\n  group_by(line)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  arrange(., mean_delay)\n\ndelay_from <- merged_dataset %>%\n  group_by(from)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  arrange(., -mean_delay)%>%\n  head(20)\n\nbig_from <- merged_dataset %>%\n  group_by(From_city)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  mutate(status = 'from')%>%\n  rename(city_type = From_city)\n\nbig_to <- merged_dataset %>%\n  group_by(To_city)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  mutate(status = 'to')%>%\n  rename(city_type = To_city)\n\ngrid.arrange(ggplot(data = delay_line, aes(x = line, y = mean_delay, fill = mean_delay)) +\n  geom_col(position = \"dodge\")+\n  labs(title = \"Delay minutes comparison in lines\", x = \"line\", y = \"Mean Delay\") + \n  scale_fill_gradient(low = \"#2a9d8f\", high = \"#264653\") +\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 15, hjust = 1)) ,\n  ggplot(data = rbind(big_from,big_to), aes(x = status , y = mean_delay, fill = city_type)) +\n  geom_col(position = \"dodge\")+\n  labs(title = \"Delay minutes comparison in big and small city\", x = \"City Type\", y = \"Mean Delay\") + \n  scale_fill_manual(values = palette2)+\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 0 , hjust = 1)),\n  ggplot(data = delay_from, aes(x = from, y = mean_delay, fill = mean_delay)) +\n  geom_col(position = \"dodge\")+\n  labs(title = \"Delay minutes comparison in lines\", x = \"line\", y = \"Mean Delay\") + \n  scale_fill_gradient(low = \"#2a9d8f\", high = \"#264653\") +\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 30, hjust = 1)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/spatial analysis-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_from <- merged_dataset %>%\n  group_by(from)%>%\n  summarize(mean_delay = mean(delay_minutes)) %>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(status = 'Orientation')%>%\n  rename(station = from)\n\nmap_to <- merged_dataset %>%\n  group_by(to)%>%\n  summarize(mean_delay = mean(delay_minutes)) %>%\n  left_join(stop,by=c('to'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(status = 'Destination')%>%\n  rename(station = to)\n\nggplot() +\n  geom_sf(data = NJTracts, color = 'grey') + \n  geom_sf(data = rbind(map_from,map_to), aes(size = mean_delay,color = mean_delay), alpha = 0.5) +\n  scale_colour_viridis(direction = -1,discrete = FALSE, option = \"D\")+\n  scale_size_continuous(name = \"Delay Minutes\") +\n  coord_sf()+\n  labs(title=\"Delayed Time in Station, October, 2019\")+\n  facet_grid(~status)+\n  mapTheme()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/map visualization-1.png){width=960}\n:::\n:::\n\n\n## Operation Effects\nIn addition to the influence of the temporal and spatial dimensions on the delay time, we also wanted to explore the influence of some external factors as well as the operational factors of the train system on the delay.Looking at the weather conditions in October, the temperatures showed a fluctuating downward trend, while at the precipitation level several large precipitation events were found in the second half of October.\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(\n  ggplot(weather.Panel, aes(interval60,Precipitation)) + geom_line(color=\"#2a9d8f\") + \n  labs(title=\"Percipitation\", x=\"Hour\", y=\"Perecipitation\") + theme_minimal(),\n  ggplot(weather.Panel, aes(interval60,Wind_Speed)) + geom_line(color=\"#2a9d8f\") + \n    labs(title=\"Wind Speed\", x=\"Hour\", y=\"Wind Speed\") + theme_minimal(),\n  ggplot(weather.Panel, aes(interval60,Temperature)) + geom_line(color=\"#2a9d8f\") + \n    labs(title=\"Temperature\", x=\"Hour\", y=\"Temperature\") + theme_minimal(),\n  top=\"Weather Data - NJ EWR - Nov, 2019\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_weather-1.png){width=768}\n:::\n:::\n\n\nFor the number of intersections, overall the  delay time decreases as more lines pass through the station, while the direction of the line has no significant effect on the intersection. When we focus on the effect of weather on the delay, we can find that rainy weather will have higher delay time, and as the weather rises the delay time will show a decreasing trend. This result may be explained by the fact that trains travel at lower speeds in rainy weather and that trains take more time to start up in low temperatures. The distance between stations does not have a significant effect on the delay time.\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_distance <- merged_dataset %>%\n  group_by(distance)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ndelay_intersct <- rbind(\n  merged_dataset %>%\n  group_by(from_inter)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  mutate(status = 'from')%>%\n  rename(inter = from_inter),\n  merged_dataset %>%\n  group_by(to_inter)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  mutate(status = 'to')%>%\n  rename(inter = to_inter))\n\ndelay_rain_week <- merged_dataset %>%\n  mutate(rain = ifelse(Precipitation == 0,'NoRain','Rain'))%>%\n  group_by(rain)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ndelay_temp <- merged_dataset %>%\n  group_by(Temperature)%>%\n  summarize(mean_delay = mean(delay_minutes))\n# just calculate the intersecation delay\ngrid.arrange(\n  ggplot(data = delay_intersct, aes(x = inter, y = mean_delay,fill=status)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = palette2) +\n  labs(title = \"Delay minutes in each intersection\", x = \"Num of Intersection\", y = \"Mean Delay\") +\n  theme_minimal(),\n  ggplot(data = delay_rain_week, aes(x = rain, y = mean_delay,fill=rain)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = palette2) +\n  labs(title = \"Delay minutes with Rain\", x = \"Rain\", y = \"Mean Delay\") +\n  theme_minimal(),\n  ggplot(data = delay_distance, aes(x = distance, y = mean_delay)) +\n  geom_line(color = \"#2a9d8f\") +\n  labs(title = \"The relationship between delay and distance\", x = \"Distance\", y = \"Value\") +\n  geom_smooth(method = \"lm\", se = TRUE)+\n  theme_minimal(),\n  ggplot(data = delay_temp, aes(x = Temperature, y = mean_delay)) +\n  geom_line(color = \"#2a9d8f\") +\n  labs(title = \"The relationship between delay and temperature\", x = \"Temperature\", y = \"Value\") +\n  geom_smooth(method = \"lm\", se = TRUE)+\n  theme_minimal())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/operation effects-1.png){width=960}\n:::\n:::\n\n\n## Space-time Autocorrelation\nAfter the spatial and temporal analysis, We would like to explore more deeply the autocorrelation of space-time with delay time. Looking at the distribution of the average delay time in terms of time and site, we were able to find a delay effect of the average delay time on the site. Therefore, we can draw the inference that the front site on a route will have a lagging effect on the delay time of the back site. And overall, the commuting area around New York has much smaller and more consistent delays, relative to the Atlantic City line.\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_stop_time <- merged_dataset %>%\n  group_by(from,to,hour(interval60))%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  rename(hour = 'hour(interval60)')%>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)\n\nggplot() +\n    geom_sf(data = NJTracts, color = 'grey') + \n    geom_sf(data = delay_stop_time, aes(size = line_intersct,color = mean_delay)) +\n    scale_colour_viridis(direction = -1,discrete = FALSE, option = \"D\") +\n    labs(title = \"Station Delay For One Day in Oct, 2019\",\n         subtitle = \"Hours in a day: {current_frame}\") +\n    transition_manual(hour)+ mapTheme()+theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/delay analysis combine-1.gif)\n:::\n:::\n\n\nAnd when we want to consider the effect of intersections on delay times, we are able to find that the number of intersections on weekdays does not have a large impact on the degree of delay, except for the New York station which has a smaller delay time. This may be due to the fact that New York station has more passenger throughput resulting in a tighter departure frequency. On weekends, we are able to find that stations that are intersections have lower average delay times. \n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_intersct_week_f <-merged_dataset %>%\n  group_by(from_inter,weekend)%>%\n  summarize(mean_delay = mean(delay_minutes))\n\ninter_stop <- stop%>%\n  right_join(delay_intersct_week_f,by=c('line_intersct' = 'from_inter'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)\n\nggplot() +\n    geom_sf(data = NJTracts, color = 'grey') + \n    geom_sf(data = inter_stop, aes(size = line_intersct,color = mean_delay)) +\n    scale_colour_viridis(direction = -1,discrete = FALSE, option = \"D\") +\n    labs(title = \"Station Delay Intersection Comparison, 2019\") +\n    facet_wrap(~weekend)+ mapTheme()+theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/intersect-map-1.png){width=672}\n:::\n:::\n\n\nAnd in addition to exploring the phenomenon of temporal pattern in a day, we also hope to discover temporal patterns over long periods of time. In a weekly dimension, we find that weekday and weekend delays are relatively stable, and the direction of the line does not have a significant spatial effect on the delay. Similarly, when we go to look at the spatial distribution of the average delay time for each week in a month, the variation in delay time is small and very stable.\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_to_time <- merged_dataset %>%\n  group_by(to,dotw)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  rename(Day = dotw)%>%\n  left_join(stop,by=c('to'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(status = 'Orientation')%>%\n  rename(station = to)\n\ndelay_from_time <- merged_dataset %>%\n  group_by(from,dotw)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  rename(Day = dotw)%>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(status = 'Destination')%>%\n  rename(station = from)\n\nggplot() +\n    geom_sf(data = NJTracts, color = 'grey') + \n    geom_sf(data = rbind(delay_from_time,delay_to_time), aes(size =mean_delay, color = mean_delay)) +\n    scale_colour_viridis(direction = -1,discrete = FALSE, option = \"D\") +\n    labs(title = \"Station Delay For One Week in Oct, 2019\",\n         subtitle = \"Day in a week: {current_frame}\") +\n    facet_wrap(~status)+\n    transition_manual(Day)+ mapTheme()+theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/gif-direction-dow-1.gif)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_to_time <- merged_dataset %>%\n  group_by(to,week)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  left_join(stop,by=c('to'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(status = 'Orientation')%>%\n  rename(station = to)\n\ndelay_from_time <- merged_dataset %>%\n  group_by(from,week)%>%\n  summarize(mean_delay = mean(delay_minutes))%>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(status = 'Destination')%>%\n  rename(station = from)\n\nggplot() +\n    geom_sf(data = NJTracts, color = 'grey') + \n    geom_sf(data = rbind(delay_from_time,delay_to_time), aes(size =mean_delay, color = mean_delay)) +\n    scale_colour_viridis(direction = -1,discrete = FALSE, option = \"D\") +\n    labs(title = \"Station Delay For One Month in Oct, 2019\",\n         subtitle = \"Week in a month: {current_frame}\") +\n    facet_wrap(~status)+\n    transition_manual(week)+ mapTheme()+theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/gif-direction-week-1.gif)\n:::\n:::\n\n\nOverall, the spatial-temporal distribution of delay times is consistent with the findings of the temporal and spatial analyses conducted in the previous At the same time, we found a spatial manifestation of the lag effect of delay times at the site level. This provides us with a choice of new independent variables for the subsequent construction of the predictive model.\n\n## Lag Effects\nBased on the exploratory analysis described above, we found lag effects on delay times at the spatial and temporal levels, so we created temporal lag and spatial lag variables to make predictions in our real-world model. In a practical sense, the temporal lag can be interpreted as the effect of the amount of delay that occurs before a certain time at a passenger's stop on the delay of the schedule he is traveling on. The spatial lag can be interpreted as the effect of the delay of the stop of the passenger's trip before a certain time at his stop on the delay of the stop at which he is traveling.\n\nBecause for the USE CASE we want to realize the delay prediction of passengers in the period before boarding, we choose a relatively small time lag of 15 minutes as the unit, so that we can provide more time lag variables to be added in the model the closer the boarding time is to the boarding time. \n\n### Time Lag\nIn terms of the correlation of the time-lagged variables with respect to the delay time, their correlation with the delay time decreases as the lag time increases. However, in general, the correlation of delay time in the same site is overall low.\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_dataset <- merged_dataset %>%\n   mutate(interval15 = floor_date(ymd_hms(scheduled_time), unit = \"15 mins\"))\n\nmerged_dataset <- \n  merged_dataset %>% \n  arrange(from_id, interval15) %>% \n  mutate(lag15min = dplyr::lag(delay_minutes,1),\n         lag30min = dplyr::lag(delay_minutes,2),\n         lag45min = dplyr::lag(delay_minutes,3),\n         lag1h = dplyr::lag(delay_minutes,4),\n         lag1h15min = dplyr::lag(delay_minutes,5),\n         lag1h30min = dplyr::lag(delay_minutes,6),\n         lag1h45min = dplyr::lag(delay_minutes,7),\n         lag2h = dplyr::lag(delay_minutes,8),\n         lag2h15min = dplyr::lag(delay_minutes,9),\n         lag2h30min = dplyr::lag(delay_minutes,10),\n         lag2h45min = dplyr::lag(delay_minutes,11),\n         lag3h = dplyr::lag(delay_minutes,12))\n\nas.data.frame(merged_dataset) %>%\n    group_by(interval15) %>% \n    summarise_at(vars(starts_with(\"lag\"), \"delay_minutes\"), mean, na.rm = TRUE) %>%\n    gather(Variable, Value, -interval15, -delay_minutes) %>%\n    mutate(Variable = factor(Variable, levels=c(\"lag15min\",\"lag30min\",\"lag45min\",\"lag1h\",                       \"lag1h15min\",\"lag1h30min\",\"lag1h45min\",\"lag2h\",\"lag2h15min\",\"lag2h30min\",\"lag2h45min\",\"lag3h\")))%>%\n    group_by(Variable) %>%  \n    summarize(correlation = round(cor(Value, delay_minutes),2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n   Variable   correlation\n   <fct>            <dbl>\n 1 lag15min          0.59\n 2 lag30min          0.44\n 3 lag45min          0.4 \n 4 lag1h             0.4 \n 5 lag1h15min        0.35\n 6 lag1h30min        0.33\n 7 lag1h45min        0.23\n 8 lag2h             0.15\n 9 lag2h15min        0.18\n10 lag2h30min        0.22\n11 lag2h45min        0.23\n12 lag3h             0.23\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_dataset_station <- \n  merged_dataset %>% \n  arrange(train_id, interval15,stop_sequence) %>% \n  mutate(lagsstation = if_else(stop_sequence == 1, 0, lag(delay_minutes, 1)),\n         lags2station = if_else(stop_sequence == 1 | stop_sequence == 2, 0, lag(delay_minutes, 2)),\n         lags3station = if_else(stop_sequence == 1 | stop_sequence == 2| stop_sequence == 3, 0, lag(delay_minutes, 3)),\n         lags4station = if_else(stop_sequence == 1 | stop_sequence == 2| stop_sequence == 3| stop_sequence == 4, 0, lag(delay_minutes, 4)),\n         lags5station = if_else(stop_sequence == 1 | stop_sequence == 2| stop_sequence == 3| stop_sequence == 4| stop_sequence == 5, 0, lag(delay_minutes, 5)),\n         lags6station = if_else(stop_sequence == 1 | stop_sequence == 2| stop_sequence == 3| stop_sequence == 4| stop_sequence == 5| stop_sequence == 6, 0, lag(delay_minutes, 6)),\n         lags7station = if_else(stop_sequence == 1 | stop_sequence == 2| stop_sequence == 3| stop_sequence == 4| stop_sequence == 5 | stop_sequence ==6 | stop_sequence == 7, 0, lag(delay_minutes, 7)),\n         lags8station = if_else(stop_sequence == 1 | stop_sequence == 2| stop_sequence == 3| stop_sequence == 4| stop_sequence == 5| stop_sequence == 6| stop_sequence == 7| stop_sequence == 8 , 0, lag(delay_minutes, 8))\n         )\n\nselected_columns <- merged_dataset_station[, c(\"delay_minutes\", \"lag15min\",\"lag30min\",\"lag45min\",\"lag1h\",                       \"lag1h15min\",\"lag1h30min\",\"lag1h45min\",\"lag2h\",\"lag2h15min\",\"lag2h30min\",\"lag2h45min\",\"lag3h\",\"week\")]\ncor_delay_all_time <- cor(selected_columns, use = \"complete.obs\")[\"delay_minutes\", -1]%>%\n  as.data.frame()%>%rename(cor_score = '.')\n\nplotData.lag_time <-\n  filter(as.data.frame(merged_dataset_station), week == 43) %>%\n  dplyr::select(lag15min,lag30min,lag45min,lag1h,                       lag1h15min,lag1h30min,lag1h45min,lag2h,lag2h15min,lag2h30min,lag2h45min,lag3h, delay_minutes) %>%\n  gather(Variable, Value, -delay_minutes) %>%\n  mutate(Variable = fct_relevel(Variable,\"lag15min\",\"lag30min\",\"lag45min\",\"lag1h\",                       \"lag1h15min\",\"lag1h30min\",\"lag1h45min\",\"lag2h\",\"lag2h15min\",\"lag2h30min\",\"lag2h45min\",\"lag3h\"))\n\ncorrelation.lag_time <-\n  group_by(plotData.lag_time, Variable) %>%\n    summarize(correlation = round(cor(Value, delay_minutes, use = \"complete.obs\"), 2))\n\nggplot(plotData.lag_time, aes(Value,delay_minutes))+\n  geom_point(size = 0.1) +\n  geom_text(data = correlation.lag_time, aes(label = paste(\"r =\", round(correlation, 2))),\n            x=-Inf, y=Inf, vjust = 1.5, hjust = -.1) +\n  geom_smooth(method = 'lm', se=FALSE, color =\"#2a9d8f\")+\n  facet_wrap(~Variable, ncol = 4, scales = 'free') +\n  labs(title = \"Delay minute from previous time as a function of spatial lags\",\n       subtitle = \"One week in Oct, 2019\") +\n  mapTheme()+theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/station_lags-1.png){width=960}\n:::\n:::\n\n\n### Station Lag\nAs for the correlation of spatial lags, we were able to find that the overall correlation of the lagged variables of the sites for the delay time decreases as the number of lagged sites increases. However, overall, the correlation of spatially lagged variables to delay time is high.\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/evaluate_station_lags-1.png){width=960}\n:::\n:::\n\n\nOverall, at the level of lagged impacts, spatial lagged impacts possess a high correlation for delay times, while temporal lagged impacts do not have a high correlation for delay times.\n\n## Correlation Matrix\nIn summary, we found the influence of factors on delay time at the spatial, temporal, operational, and lag effect levels, and we constructed a correlation matrix to visualize the correlation between the factors and the delay time for better screening of effective independent variables for subsequent data modeling. From the matrix, we can find that the spatial lag and time lag variables have more obvious effects on delay time.\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_dataset_station <- merged_dataset_station%>%\n  mutate(isbig_from = ifelse(From_city == 'big city',1,0),\n         isbig_to = ifelse(To_city == 'big city',1,0),\n         isweekday = ifelse(weekend == 'Weekday',1,0))\n\ncor_matrix <- merged_dataset_station %>%\n  dplyr::select(delay_minutes,stop_sequence,distance,Temperature,Precipitation,Wind_Speed,from_inter,to_inter,isweekday,lag15min,lag30min,lag45min,lag1h,                       lag1h15min,lag1h30min,lag1h45min,lag2h,lag2h15min,lag2h30min,lag2h45min,lag3h,lagsstation,lags2station,lags3station, lags4station, lags5station, lags6station, lags7station, lags8station)\n\ncor_matrix <- cor(cor_matrix, method = \"pearson\", use = \"complete.obs\")\n\ncorrplot(cor_matrix, method = 'shade', order = 'AOE', diag = FALSE,tl.col = 'black')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cor-matrix-1.png){width=672}\n:::\n:::\n\n\n# Data Modeling\nBased on the above analysis and the use of our application scenarios, we constructed three models, respectively, 30 minutes ago, 60 minutes ago and 90 minutes ago, for different time periods from the expected arrival time to analyze (in the actual use of the model there may be more time periods to carry out a more accurate prediction, in this project in order to reflect the concept of multiple time periods and multiple models to choose the three models to talk about and analyze). The variables corresponding to the models with longer time lags further away from the departure time can only be selected with further time lags and spatial lags to correspond to the available data situation in the actual context. Among the variables used in the model, the following main types are included:\n\n[space relevant variable] -- Line, Intersection, Station, Direction\n\n[time relevant variable] -- Hour, Weekend,\n\n[operation relevant variable] -- Temperature, Precipitation, Wind Speed, Stop Sequence\n\n[temporal/spatial lag variable] -- (based on the different models)\n\nAnd for model selection, we chose Ordinary Least Squares regression (OLS) model for model construction. The model has many advantages such as easy computation as well as interpretability.\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_dataset_model <- merged_dataset_station%>%\n  filter(line != 'Atl. City Line')%>%\n  mutate(hour = hour(interval60))\ndelay.Train <- filter(merged_dataset_model, week <= 42)\ndelay.Test <- filter(merged_dataset_model, week > 42)\n\nreg.30 <- \n  lm(delay_minutes ~ from + to + hour + weekend + Temperature + Precipitation + Wind_Speed + lag45min \n     + lag1h + lag1h15min + lag1h30min + lag1h45min + lag2h + lag2h15min + lag2h30min + \n       lag2h45min + lag3h \n     + lags3station+ lags4station+ lags5station+lags6station+ stop_sequence + line + to_inter + from_inter, \n     data=delay.Train)\n\nreg.60 <- \n  lm(delay_minutes ~  from + to + hour + weekend + Temperature + Precipitation + Wind_Speed\n    + lag1h + lag1h15min + lag1h30min + lag1h45min + lag2h + lag2h15min + lag2h30min + lag2h45min + lag3h + lags5station + lags6station + stop_sequence + line + to_inter + from_inter, \n     data=delay.Train)\n\nreg.90 <- \n  lm(delay_minutes ~  from + to + hour + weekend + Temperature + Precipitation + Wind_Speed\n    + lag1h30min + lag1h45min + lag2h + lag2h15min + lag2h30min + lag2h45min + lag3h+ lags6station+ stop_sequence + line + to_inter + from_inter, \n     data=delay.Train)\n```\n:::\n\n\n## Model Evaluation\nFrom the comparison of predicted and actual delay times, we can see that the closer the model is to the predicted time has a better model predictive ability. Whereas the model has worse predictive ability for very large and very small values.\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay.Test_5 <- delay.Test%>%\n  mutate(pre_5 = predict(reg.30, newdata = delay.Test),\n         abosulte_error = abs(pre_5 - delay_minutes),\n         MAE = mean(abosulte_error,na.rm = TRUE),\n         sd_AE = sd(abosulte_error,na.rm = TRUE),\n         per_error = (pre_5 - delay_minutes)/delay_minutes,\n         per_error = ifelse(per_error == Inf,0,per_error),\n         per_error = ifelse(per_error == -Inf,0,per_error))%>%\n  rename(mod_30 = pre_5)\n\ndelay.Test_6 <- delay.Test%>%\n  mutate(pre_6 = predict(reg.60, newdata = delay.Test),\n         abosulte_error = abs(pre_6 - delay_minutes),\n         MAE = mean(abosulte_error,na.rm = TRUE),\n         sd_AE = sd(abosulte_error,na.rm = TRUE),\n         per_error = (pre_6 - delay_minutes)/delay_minutes,\n         per_error = ifelse(per_error == Inf,0,per_error),\n         per_error = ifelse(per_error == -Inf,0,per_error))%>%\n  rename(mod_60 = pre_6)\n\ndelay.Test_7 <- delay.Test%>%\n  mutate(pre_7 = predict(reg.90, newdata = delay.Test),\n         abosulte_error = abs(pre_7 - delay_minutes),\n         MAE = mean(abosulte_error,na.rm = TRUE),\n         sd_AE = sd(abosulte_error,na.rm = TRUE),\n         per_error = (pre_7 - delay_minutes)/delay_minutes,\n         per_error = ifelse(per_error == Inf,0,per_error),\n         per_error = ifelse(per_error == -Inf,0,per_error))%>%\n  rename(mod_90 = pre_7)\n\ngrid.arrange(\n  delay.Test_5%>%\n  dplyr::select(interval60, from, delay_minutes, mod_30) %>%\n  gather(Variable, Value, -interval60, -from) %>%\n    group_by(Variable, interval60) %>%\n    summarize(Value = mean(Value))%>%\n    ggplot(aes(interval60, Value, colour=Variable)) + \n    geom_line(size = 0.9)+\n      labs(title = \"Predicted/Observed delay time series\", subtitle = \"30 Minustes-Pre Predict\",  x = \"Day\", y= \"Mean Delay\") +\n     theme_minimal(),\n  delay.Test_6%>%\n  dplyr::select(interval60, from, delay_minutes, mod_60) %>%\n  gather(Variable, Value, -interval60, -from) %>%\n    group_by(Variable, interval60) %>%\n    summarize(Value = mean(Value))%>%\n    ggplot(aes(interval60, Value, colour=Variable)) + \n    geom_line(size = 0.9)+\n      labs(title = \"Predicted/Observed delay time series\", subtitle = \"60 Minustes-Pre Predict\",  x = \"Day\", y= \"Mean Delay\") +\n     theme_minimal(),\n  delay.Test_7%>%\n  dplyr::select(interval60, from, delay_minutes, mod_90) %>%\n  gather(Variable, Value, -interval60, -from) %>%\n    group_by(Variable, interval60) %>%\n    summarize(Value = mean(Value))%>%\n    ggplot(aes(interval60, Value, colour=Variable)) + \n    geom_line(size = 0.9)+\n      labs(title = \"Predicted/Observed delay time series\", subtitle = \"90 Minustes-Pre Predict\",  x = \"Day\", y= \"Mean Delay\") +\n     theme_minimal(),\n  ncol=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/model error-1.png){width=960}\n:::\n:::\n\n\nAnd when we focus on the spatial generalizability of the model's performance, we are um able to find that all three models show a more even MAE, except for the line from New York to the north. Other than that, we are able to find that the models have larger model errors for stations in and around New York. This phenomenon may stem from the fact that in New York there is a higher frequency of trips and the same station may be affected by the delay time of trips on different lines.\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- delay.Test_5 %>% \n  group_by(from)%>%\n  summarise(mean_ae = mean(abosulte_error),\n            mean_pe = mean(per_error))%>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(mod = '30m-Predict')\n\ntemp2 <- delay.Test_6 %>% \n  group_by(from)%>%\n  summarise(mean_ae = mean(abosulte_error),\n            mean_pe = mean(per_error))%>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(mod = '60m-Predict')\n\ntemp3 <- delay.Test_7 %>% \n  group_by(from)%>%\n  summarise(mean_ae = mean(abosulte_error),\n            mean_pe = mean(per_error))%>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)%>%\n  mutate(mod = '90m-Predict')\n\ntemp4 <- rbind(temp,temp2)\ntemp4 <- rbind(temp4,temp3)\n\nggplot() +\n    geom_sf(data = NJTracts, color = 'grey') + \n    geom_sf(data = temp4, aes(color = mean_ae,size = line_intersct)) +\n    scale_colour_viridis(direction = -1,discrete = FALSE, option = \"D\") +\n    labs(title = \"MAE Spatial Comparison in 3 Models\") +\n    facet_wrap(~mod)+\n    mapTheme()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/error visualization-1.png){width=960}\n:::\n:::\n\n\nAnd in addition to model error assessment in space, we would also like to see if the model performs more universally across time. Overall, the models perform better on weekdays, both in terms of the magnitude of the errors and the stability of the errors. Moreover, both the error of the model and the s d of the error increase with the length of the model prediction. In terms of the comparison between weekdays and weekends, the three models have a smaller error boost on weekdays with the increase of time. In terms of the distribution of errors, the models on weekdays show a generally smaller standard divination. Therefore, we can conclude that the models on weekdays can have a more stable error range.\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp2 <- delay.Test_5 %>% \n  group_by(weekend)%>%\n  summarise(MAE = mean(abosulte_error,na.rm = TRUE),\n            sd_AE = sd(abosulte_error,na.rm = TRUE))%>%\n  mutate(mod = '30m')\n\ntemp <- delay.Test_6 %>% \n  group_by(weekend)%>%\n  summarise(MAE = mean(abosulte_error,na.rm = TRUE),\n            sd_AE = sd(abosulte_error,na.rm = TRUE))%>%\n  mutate(mod = '60m')\n\ntemp3 <- delay.Test_7 %>% \n  group_by(weekend)%>%\n  summarise(MAE = mean(abosulte_error,na.rm = TRUE),\n            sd_AE = sd(abosulte_error,na.rm = TRUE))%>%\n  mutate(mod = '90m')\n\ntemp4 <- rbind(temp2,temp)\ntemp4 <- rbind(temp4,temp3)\n\ngrid.arrange(\n  ggplot(temp4, aes(x=mod, y=MAE, colour=mod)) +\n    geom_point() +\n    facet_wrap(~weekend)+\n      labs(title = \"MAE Temporal Comparison\",x = \"Model\", y= \"MAE\") +\n     theme_minimal(),\n  ggplot(temp4, aes(x=mod, y=sd_AE, colour=mod)) +\n    geom_point() +\n    facet_wrap(~weekend)+\n      labs(title = \"SD of MAE Temporal Comparison\", x = \"Model\", y= \"SD_MAE\") +\n     theme_minimal()\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/model comparison-1.png){width=960}\n:::\n:::\n\n\nWhen we look at the spatial distribution of this modeled performance difference between weekdays and weekends, we are able to find that the line north from New York possesses a smaller weekend and weekday error difference. The spatial difference between weekdays and weekends is primarily seen for lines heading south from New York, with stations on these lines having higher model errors on weekends.The reason this error exists may stem from the fact that on weekends more passengers from cities south of New York (e.g., Philadelphia and Jersey City) commute between New York and their locations for recreational or other purposes, and thus the same frequency in the face of significantly higher traffic may create a greater likelihood of delays.\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- delay.Test_6 %>% \n  group_by(from,weekend)%>%\n  summarise(mean_ae = mean(abosulte_error),\n            mean_pe = mean(per_error))%>%\n  left_join(stop,by=c('from'='STATION_ID'))%>%\n  st_as_sf(coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)\n\nggplot() +\n    geom_sf(data = NJTracts, color = 'grey') + \n    geom_sf(data = temp, aes(color = mean_ae)) +\n    scale_colour_viridis(direction = -1,discrete = FALSE, option = \"D\") +\n    labs(title = \"MAE Comaprison in Weekend\",subtitle = '60mins Model') +\n    facet_wrap(~weekend) + mapTheme()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/error weekend map comparison-1.png){width=960}\n:::\n:::\n\n\nn turn, the model's performance for the line shows more similar characteristics at the spatial level. All of the routes exhibit larger errors as they are pushed farther back in time. Specifically, the lines from New York northward have smaller errors and are less affected by the different time models than the other lines. The Northeast Corridor, on the other hand, has the worst performance of the models that are closest in time. However, as we push farther back in time, the modeled errors show a similar pattern for the other lines.\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- delay.Test_6 %>% \n  group_by(line)%>%\n  summarise(mean_ae = mean(abosulte_error),\n            mean_pe = mean(per_error))%>%\n  left_join(line,by=c('line'='LINE_NAME'))%>%\n  mutate(mod = '60min')\n\ntemp2 <- delay.Test_5 %>% \n  group_by(line)%>%\n  summarise(mean_ae = mean(abosulte_error),\n            mean_pe = mean(per_error))%>%\n  left_join(line,by=c('line'='LINE_NAME'))%>%\n  mutate(mod = '30min')\n\ntemp3 <- delay.Test_7 %>% \n  group_by(line)%>%\n  summarise(mean_ae = mean(abosulte_error),\n            mean_pe = mean(per_error))%>%\n  left_join(line,by=c('line'='LINE_NAME'))%>%\n  mutate(mod = '90min')\n\ntemp4 <- rbind(temp,temp2)\ntemp4 <- rbind(temp4,temp3)\n\nggplot() +\n    geom_sf(data = NJTracts, color = 'grey') + \n    geom_sf(data = temp4,aes(color = mean_ae, geometry = geometry))+\n    facet_wrap(~mod)+\n    scale_colour_viridis(direction = -1,discrete = FALSE, option = \"A\") +\n    labs(title = \"Model MAE Comparison in Line\",subtitle = '30 mins & 60 mins model') + mapTheme()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/line comparison-1.png){width=960}\n:::\n:::\n\n\nIn the case of over- or under-forecasting, we find that all three models exhibit under-forecasting, and that the degree of under-forecasting increases as we move farther back in the model's time. Therefore, in the actual model prediction, we can increase the model noise according to the model to increase the accuracy of the model prediction.\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- delay.Test_5%>%\n  dplyr::select(delay_minutes,mod_30,weekend)%>%\n  mutate(mod = '30min')%>%\n  rename(pre = mod_30)\ntemp2 <- delay.Test_6%>%\n  dplyr::select(delay_minutes,mod_60,weekend)%>%\n  mutate(mod = '60min')%>%\n  rename(pre = mod_60)\ntemp3 <- delay.Test_7%>%\n  dplyr::select(delay_minutes,mod_90,weekend)%>%\n  mutate(mod = '90min')%>%\n  rename(pre = mod_90)\n\ntemp4 <- rbind(temp,temp2)\ntemp4 <- rbind(temp4,temp3)\n\nggplot()+\n  geom_point(data = temp4,aes(x= delay_minutes, y = pre),color = \"#2a9d8f\")+\n    geom_smooth(data = temp4,aes(x= delay_minutes, y= pre), method = \"lm\", se = FALSE, color = '#f4a261')+\n    geom_abline(slope = 1, intercept = 0)+\n  facet_grid(mod~weekend)+\n  labs(title=\"Observed vs Predicted\",\n       subtitle = 'model and weekend camparison',\n       x=\"Observed delay minutes\", \n       y=\"Predicted delay minutes\")+\n  plotTheme()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/over-under-predict-1.png){width=960}\n:::\n:::\n\n\n## Model Generalizability Evaluation\nIn order to better test the model's ability to perform in real-world scenarios, i.e., on new datasets, we evaluate the model's ability using cross-validation.\n\n::: {.cell}\n\n```{.r .cell-code}\nfitControl <- trainControl(method = \"cv\", number = 20)\nset.seed(825)\n\nreg.cv.30 <- \n  train(delay_minutes ~ from + to + hour + weekend + Temperature + Precipitation + Wind_Speed + lag45min  + lag1h + lag1h15min + lag1h30min + lag1h45min + lag2h + lag2h15min + lag2h30min + lag2h45min + lag3h + lags3station+ lags4station+ lags5station+lags6station+ stop_sequence + line + to_inter + from_inter, merged_dataset_model, \n        method = \"lm\", trControl = fitControl, na.action = na.pass)\n\nreg.cv.60 <- \n  train(delay_minutes ~ from + to + hour + weekend + Temperature + Precipitation + Wind_Speed+ lag1h + lag1h15min + lag1h30min + lag1h45min + lag2h + lag2h15min + lag2h30min + lag2h45min + lag3h + lags5station + lags6station + stop_sequence + line + to_inter + from_inter, merged_dataset_model, \n        method = \"lm\", trControl = fitControl, na.action = na.pass)\n\nreg.cv.90 <- \n  train(delay_minutes ~ from + to + hour + weekend + Temperature + Precipitation + Wind_Speed + lag1h30min + lag1h45min + lag2h + lag2h15min + lag2h30min + lag2h45min + lag3h+ lags6station+ stop_sequence + line + to_inter + from_inter, merged_dataset_model, \n        method = \"lm\", trControl = fitControl, na.action = na.pass)\n```\n:::\n\n\nLooking at the performance of the three models, we can see that the errors of the models show a gradual increase as time is pushed farther away. Regarding the stability of the model error, we can find that the 30-minute model has better stability. And as the time of the model is pushed farther, we can find that the R-square of the model shows a decreasing trend, which indicates that the credibility of the model is also decreasing with the increase of time.\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(\ndplyr::select(reg.cv.30$resample, -Resample) %>%\n  gather(metric, value) %>%\n  left_join(gather(reg.cv.30$results[2:4], metric, mean)) %>%\n  ggplot(aes(value)) + \n    geom_histogram(bins=35, fill = \"#2a9d8f\") +\n    facet_wrap(~metric) +\n    geom_vline(aes(xintercept = mean), colour = \"#e76f51\", linetype = 3, size = 1.5) +\n    scale_x_continuous(limits = c(0, 5)) +\n    labs(x=\"Goodness of Fit\", y=\"Count\", title=\"CV Goodness of Fit Metrics-30mins Model\",\n         subtitle = \"Across-fold mean reprented as dotted lines\")+\n  theme_minimal(),\ndplyr::select(reg.cv.60$resample, -Resample) %>%\n  gather(metric, value) %>%\n  left_join(gather(reg.cv.60$results[2:4], metric, mean)) %>%\n  ggplot(aes(value)) + \n    geom_histogram(bins=35, fill = \"#2a9d8f\") +\n    facet_wrap(~metric) +\n    geom_vline(aes(xintercept = mean), colour = \"#e76f51\", linetype = 3, size = 1.5) +\n    scale_x_continuous(limits = c(0, 5)) +\n    labs(x=\"Goodness of Fit\", y=\"Count\", title=\"CV Goodness of Fit Metrics-60mins Model\",\n         subtitle = \"Across-fold mean reprented as dotted lines\")+\n  theme_minimal(),\ndplyr::select(reg.cv.90$resample, -Resample) %>%\n  gather(metric, value) %>%\n  left_join(gather(reg.cv.90$results[2:4], metric, mean)) %>%\n  ggplot(aes(value)) + \n    geom_histogram(bins=35, fill = \"#2a9d8f\") +\n    facet_wrap(~metric) +\n    geom_vline(aes(xintercept = mean), colour = \"#e76f51\", linetype = 3, size = 1.5) +\n    scale_x_continuous(limits = c(0, 5)) +\n    labs(x=\"Goodness of Fit\", y=\"Count\", title=\"CV Goodness of Fit Metrics-90mins Model\",\n         subtitle = \"Across-fold mean reprented as dotted lines\")+\n  theme_minimal(),nrow=3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod-genral evaluate-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_summary <- bind_rows(\n  reg.cv.30$resample %>%\n    summarise(Model = \"30 min Model\",\n              MAE = mean(.[,3]),\n              sd = sd(.[,3])),\n  reg.cv.60$resample %>%\n    summarise(Model = \"60 min Model\",\n              MAE = mean(.[,3]),\n              sd = sd(.[,3])),\n  reg.cv.90$resample %>%\n    summarise(Model = \"90 min Model\",\n              MAE = mean(.[,3]),\n              sd = sd(.[,3]))\n)\n\ncombined_summary %>%\n  as.data.frame() %>%\n  mutate(Model = factor(Model, levels = c(\"30 min Model\", \"60 min Model\", \"90 min Model\"))) %>%\n  kbl(col.names = c('Model', 'Mean Absolute Error', 'Standard Deviation of MAE')) %>%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Model </th>\n   <th style=\"text-align:right;\"> Mean Absolute Error </th>\n   <th style=\"text-align:right;\"> Standard Deviation of MAE </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 30 min Model </td>\n   <td style=\"text-align:right;\"> 1.804856 </td>\n   <td style=\"text-align:right;\"> 0.0230556 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 60 min Model </td>\n   <td style=\"text-align:right;\"> 2.242522 </td>\n   <td style=\"text-align:right;\"> 0.0292971 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 90 min Model </td>\n   <td style=\"text-align:right;\"> 2.418186 </td>\n   <td style=\"text-align:right;\"> 0.0257110 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n# Conclusion\nOverall, we can find that train delays are mainly affected by elements such as time, weather, and lagging delays, which are also very much in line with the actual scenarios in reality. In terms of modeling, overall the model performs better, and in terms of accuracy, the model's MAE familiarization error is around 2-4 minutes, which is an acceptable modeling error for a practical application scenario. And from a generalizability perspective, we can see that the RMSE of the model shows a nearly normal distribution across multiple models, so the performance is better from a pure data perspective. However, from a spatial perspective, the model's errors are more varied across different routes, with the route from New York to the north having a larger error than the other routes. Also in terms of the spatial and temporal distribution, the model has a larger error on weekends than on weekdays, and this difference in error varies from route to route.\n\nTherefore, in order to make the model perform better, on the one hand, the model should be constructed with smaller time intervals (e.g., 10 minutes or even 5 minutes as the modeling interval) in order to obtain more lagged variables to obtain better model accuracy. In terms of model generalizability, the current model does not reflect the characteristics of different routes well, which leads to significant differences in the model performance of stations on different routes. Therefore, in the optimization of the model, more characteristics of the lines should be explored (e.g., physical information such as the year of construction and quality of the track, and station-related service information such as the line capacity of the station) to reduce the line-level errors.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}